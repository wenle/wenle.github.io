<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wenle&#39;s Blog</title>
    <description>工程师
</description>
    <link>https://wenle.github.io/</link>
    <atom:link href="https://wenle.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 26 Jan 2016 22:37:04 +0800</pubDate>
    <lastBuildDate>Tue, 26 Jan 2016 22:37:04 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>互联网经验小记—限流与降级</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;互联网经验小记—限流与降级&lt;/h2&gt;
&lt;p&gt;话说我在进入互联网之前，没有感觉到很大的行业差异。进来之后，发现同为Java服务端，服务的场景不一样，解决问题的方法论完全不一样，这也是所谓的互联网经验值钱的地方。后面我会陆续介绍一些这方面的概念。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;降级与限流&lt;/h3&gt;
&lt;p&gt;凡是做管理系统的，一般和这两个名词无缘。对网站来说，衡量性能有两个常见指标，RT和QPS。RT是Response time，即响应时间。QPS是Query per second，即每秒查询次数。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;降级&lt;/h4&gt;

&lt;p&gt;当RT高的时候，用户感觉到明显的延时，体验下降，甚至业务流程无法正常进行。在这种时候可以通过关闭次要服务，或者降低服务质量来保证RT，保证核心业务能正常进行。举个例子，Gmail的网站本来是很酷的。但是如果网络条件不好，loading时间久的时候，Gmail会提示用户是否要切换到基本html版本。在基本html版本网页很快就加载完成了，用户可以看邮件，但是没有JavaScript实现的炫酷的体验。再比如电商网站的商品页面，在降级时，推荐、广告、浏览历史之类的模块可以关闭，图片质量可以降低。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;限流&lt;/h4&gt;

&lt;p&gt;限流是指某个系统对关联系统的访问QPS过高，为了防止拖垮关联的核心系统，对从自身发出的访问进行限制。&lt;br /&gt;
比如网站最前端的nginx接入层可以做限流配置，防止冲垮后面的服务器。再比如，某网站做了一个火爆的促销，在这个促销页面上访问了一个能力比较弱的应用服务器，那么在促销上线之前，就应该有相应的限流方案，比如说在1秒钟内访问人数达到多少后，其他的人直接转到错误页面。&lt;/p&gt;

</description>
        <pubDate>Tue, 26 Jan 2016 00:00:00 +0800</pubDate>
        <link>https://wenle.github.io/2016/01/26/service-downgrade-and-current-limit.html</link>
        <guid isPermaLink="true">https://wenle.github.io/2016/01/26/service-downgrade-and-current-limit.html</guid>
        
        
      </item>
    
  </channel>
</rss>
